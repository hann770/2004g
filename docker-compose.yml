# services:
#   web:
#     build: .
#     #command: /bin/sh -c "sleep 10 && python /app/app/create_tables.py && uvicorn app.main:app --host 0.0.0.0 --port 8000"
#     command: /bin/sh -c "sleep 10 && PYTHONPATH=/app python /app/app/create_tables.py && uvicorn app.main:app --host 0.0.0.0 --port 8000"
   
#     volumes:
#       - ./app:/app/app
#     ports:
#       - "8000:8000"
#     env_file:
#       - .env
#     depends_on:
#       - db

#   db:
#     image: postgres:13-alpine
#     restart: always
#     volumes:
#       - postgres_data:/var/lib/postgresql/data/
#     environment:
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: password
#       POSTGRES_DB: mydatabase

# volumes:
#   postgres_data:



services:
  db:
    container_name: 2004g-db
    environment:
      POSTGRES_DB: db_name
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U user
      timeout: 5s
      interval: 5s
      retries: 5
    image: postgres:13-alpine
    networks:
      default: null
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    build:
      context: .
      dockerfile: Dockerfile
    
    # CRITICAL FIX: Robust, single-line shell command for compatibility
    # It waits for the DB and then starts the app.
    #command: ["/bin/sh", "-c", "until pg_isready -h db -U user -d postgres; do echo 'Waiting for PostgreSQL...'; sleep 2; done; uvicorn app.main:app --host 0.0.0.0 --port 8000"]
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    container_name: 2004g-web
    depends_on:
      db:
        condition: service_healthy
        required: true
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/db_name
    networks:
      default: null
    ports:
      - "8000:8000"

networks:
  default:
    name: 2004g_default
volumes:
  postgres_data:
    name: 2004g_postgres_data
